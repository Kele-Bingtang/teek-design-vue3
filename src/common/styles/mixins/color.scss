@use "sass:color";
@use "sass:math";
@use "sass:map";
@use "./namespace" as *;

// ===== 颜色变体生成器 =====

// 生成基于主色的完整变体系统
@mixin generate-color-variants($name, $base-color, $is-dark: false) {
  // 基础色
  --#{$admin-namespace}-color-#{$name}: #{$base-color};

  // 悬停色
  --#{$admin-namespace}-color-#{$name}-hover: #{color-variant($base-color, "hover", $is-dark)};

  // 柔和色
  --#{$admin-namespace}-color-#{$name}-muted: #{color-variant($base-color, "muted", $is-dark)};

  // 深色
  --#{$admin-namespace}-color-#{$name}-deep: #{color-variant($base-color, "deep", $is-dark)};

  // 浅色（比基础色更亮）
  --#{$admin-namespace}-color-#{$name}-light: #{color-variant($base-color, "light", $is-dark)};

  // 对比色（文本适用）
  --#{$admin-namespace}-color-#{$name}-contrast: #{color-contrast($base-color, $is-dark)};

  // RGB 版本
  --#{$admin-namespace}-color-#{$name}-rgb: #{color-to-rgb($base-color)};
}

// ===== 核心颜色处理函数 =====
// 生成颜色变体
@function color-variant($base-color, $variant, $is-dark: false) {
  @if $variant == "hover" {
    @return generate-hover-color($base-color, $is-dark);
  }

  @if $variant == "muted" {
    @return generate-muted-color($base-color, $is-dark);
  }

  @if $variant == "deep" {
    @return generate-deep-color($base-color, $is-dark);
  }

  @if $variant == "light" {
    @return generate-light-color($base-color, $is-dark);
  }

  @warn "Unknown variant: #{$variant}";

  @return $base-color;
}

// 生成悬停色
@function generate-hover-color($base-color, $is-dark: false) {
  $lightness: color.lightness($base-color);

  @if $is-dark {
    // 暗色模式：悬停时变亮
    @return color.adjust($base-color, $lightness: 15%);
  } @else {
    // 亮色模式：悬停时变暗
    @return color.adjust($base-color, $lightness: -10%);
  }
}

// 生成柔和色
@function generate-muted-color($base-color, $is-dark: false) {
  $desaturated: color.adjust($base-color, $saturation: -30%);

  @if $is-dark {
    // 暗色模式：柔和色变亮
    @return color.adjust($desaturated, $lightness: 20%);
  } @else {
    // 亮色模式：柔和色变暗
    @return color.adjust($desaturated, $lightness: -20%);
  }
}

// 生成深色
@function generate-deep-color($base-color, $is-dark: false) {
  @if $is-dark {
    // 暗色模式：深色更暗
    @return color.adjust($base-color, $lightness: -25%, $saturation: 10%);
  } @else {
    // 亮色模式：深色更饱和
    @return color.adjust($base-color, $lightness: -15%, $saturation: 15%);
  }
}

// 生成浅色
@function generate-light-color($base-color, $is-dark: false) {
  @if $is-dark {
    // 暗色模式：浅色更亮
    @return color.adjust($base-color, $lightness: 25%, $saturation: -10%);
  } @else {
    // 亮色模式：浅色更亮
    @return color.adjust($base-color, $lightness: 25%, $saturation: -15%);
  }
}

// 生成对比色（用于文本）
@function color-contrast($base-color, $is-dark: false) {
  $lightness: color.lightness($base-color);

  @if $is-dark {
    @if $lightness > 40% {
      @return #000; // 深色背景上亮色用黑色文本
    } @else {
      @return #fff; // 深色背景上深色用白色文本
    }
  } @else {
    @if $lightness > 60% {
      @return #000; // 亮色背景上亮色用黑色文本
    } @else {
      @return #fff; // 亮色背景上深色用白色文本
    }
  }
}

// 转换为 RGB 格式
@function color-to-rgb($color) {
  $red: color.red($color);
  $green: color.green($color);
  $blue: color.blue($color);

  @return #{$red}, #{$green}, #{$blue};
}
